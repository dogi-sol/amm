//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Sharded fee accounts
/// Seeds: "fee_vault", number, bump
/// There are up to 256 fee accounts, and the number in the seed
/// is found by getting the last byte of mint pubkey.

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FeeVault {
    pub discriminator: [u8; 8],
}

impl FeeVault {
    pub const LEN: usize = 8;

    /// Prefix values used to generate a PDA for this account.
    ///
    /// Values are positional and appear in the following order:
    ///
    ///   0. `FeeVault::PREFIX`
    ///   1. index (`[u8; 1]`)
    pub const PREFIX: &'static [u8] = "fee_vault".as_bytes();

    pub fn create_pda(
        index: [u8; 1],
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &["fee_vault".as_bytes(), &index, &[bump]],
            &crate::AMM_ID,
        )
    }

    pub fn find_pda(index: [u8; 1]) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &["fee_vault".as_bytes(), &index],
            &crate::AMM_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for FeeVault {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
