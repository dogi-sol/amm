/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';

export type SharedEscrow<TAddress extends string = string> = Account<
  SharedEscrowAccountData,
  TAddress
>;

export type MaybeSharedEscrow<TAddress extends string = string> = MaybeAccount<
  SharedEscrowAccountData,
  TAddress
>;

export type SharedEscrowAccountData = {
  discriminator: Array<number>;
  owner: Address;
  name: Uint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: Uint8Array;
};

export type SharedEscrowAccountDataArgs = {
  owner: Address;
  name: Uint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: Uint8Array;
};

export function getSharedEscrowAccountDataEncoder(): Encoder<SharedEscrowAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['owner', getAddressEncoder()],
      ['name', getBytesEncoder({ size: 32 })],
      ['nr', getU16Encoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['poolsAttached', getU32Encoder()],
      ['reserved', getBytesEncoder({ size: 64 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [224, 55, 20, 31, 220, 116, 183, 194],
    })
  );
}

export function getSharedEscrowAccountDataDecoder(): Decoder<SharedEscrowAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['owner', getAddressDecoder()],
    ['name', getBytesDecoder({ size: 32 })],
    ['nr', getU16Decoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['poolsAttached', getU32Decoder()],
    ['reserved', getBytesDecoder({ size: 64 })],
  ]);
}

export function getSharedEscrowAccountDataCodec(): Codec<
  SharedEscrowAccountDataArgs,
  SharedEscrowAccountData
> {
  return combineCodec(
    getSharedEscrowAccountDataEncoder(),
    getSharedEscrowAccountDataDecoder()
  );
}

export function decodeSharedEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): SharedEscrow<TAddress>;
export function decodeSharedEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeSharedEscrow<TAddress>;
export function decodeSharedEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): SharedEscrow<TAddress> | MaybeSharedEscrow<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSharedEscrowAccountDataDecoder()
  );
}

export async function fetchSharedEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<SharedEscrow<TAddress>> {
  const maybeAccount = await fetchMaybeSharedEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSharedEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeSharedEscrow<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSharedEscrow(maybeAccount);
}

export async function fetchAllSharedEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<SharedEscrow[]> {
  const maybeAccounts = await fetchAllMaybeSharedEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSharedEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeSharedEscrow[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSharedEscrow(maybeAccount));
}

export function getSharedEscrowSize(): number {
  return 143;
}
