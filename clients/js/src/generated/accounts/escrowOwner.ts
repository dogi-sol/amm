/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { EscrowOwnerSeeds, findEscrowOwnerPda } from '../pdas';

export type EscrowOwner<TAddress extends string = string> = Account<
  EscrowOwnerAccountData,
  TAddress
>;

export type MaybeEscrowOwner<TAddress extends string = string> = MaybeAccount<
  EscrowOwnerAccountData,
  TAddress
>;

export type EscrowOwnerAccountData = { discriminator: Array<number> };

export type EscrowOwnerAccountDataArgs = {};

export function getEscrowOwnerAccountDataEncoder(): Encoder<EscrowOwnerAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [215, 217, 229, 238, 9, 70, 144, 119],
    })
  );
}

export function getEscrowOwnerAccountDataDecoder(): Decoder<EscrowOwnerAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getEscrowOwnerAccountDataCodec(): Codec<
  EscrowOwnerAccountDataArgs,
  EscrowOwnerAccountData
> {
  return combineCodec(
    getEscrowOwnerAccountDataEncoder(),
    getEscrowOwnerAccountDataDecoder()
  );
}

export function decodeEscrowOwner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): EscrowOwner<TAddress>;
export function decodeEscrowOwner<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeEscrowOwner<TAddress>;
export function decodeEscrowOwner<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): EscrowOwner<TAddress> | MaybeEscrowOwner<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEscrowOwnerAccountDataDecoder()
  );
}

export async function fetchEscrowOwner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<EscrowOwner<TAddress>> {
  const maybeAccount = await fetchMaybeEscrowOwner(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrowOwner<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeEscrowOwner<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEscrowOwner(maybeAccount);
}

export async function fetchAllEscrowOwner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<EscrowOwner[]> {
  const maybeAccounts = await fetchAllMaybeEscrowOwner(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEscrowOwner(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeEscrowOwner[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEscrowOwner(maybeAccount));
}

export function getEscrowOwnerSize(): number {
  return 8;
}

export async function fetchEscrowOwnerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EscrowOwnerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<EscrowOwner> {
  const maybeAccount = await fetchMaybeEscrowOwnerFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrowOwnerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EscrowOwnerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeEscrowOwner> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findEscrowOwnerPda(seeds, { programAddress });
  return await fetchMaybeEscrowOwner(rpc, address, fetchConfig);
}
