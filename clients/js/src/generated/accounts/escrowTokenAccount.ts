/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { EscrowTokenAccountSeeds, findEscrowTokenAccountPda } from '../pdas';

export type EscrowTokenAccount<TAddress extends string = string> = Account<
  EscrowTokenAccountAccountData,
  TAddress
>;

export type MaybeEscrowTokenAccount<TAddress extends string = string> =
  MaybeAccount<EscrowTokenAccountAccountData, TAddress>;

export type EscrowTokenAccountAccountData = { discriminator: Array<number> };

export type EscrowTokenAccountAccountDataArgs = {};

export function getEscrowTokenAccountAccountDataEncoder(): Encoder<EscrowTokenAccountAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [187, 204, 104, 138, 3, 193, 34, 208],
    })
  );
}

export function getEscrowTokenAccountAccountDataDecoder(): Decoder<EscrowTokenAccountAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getEscrowTokenAccountAccountDataCodec(): Codec<
  EscrowTokenAccountAccountDataArgs,
  EscrowTokenAccountAccountData
> {
  return combineCodec(
    getEscrowTokenAccountAccountDataEncoder(),
    getEscrowTokenAccountAccountDataDecoder()
  );
}

export function decodeEscrowTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): EscrowTokenAccount<TAddress>;
export function decodeEscrowTokenAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeEscrowTokenAccount<TAddress>;
export function decodeEscrowTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): EscrowTokenAccount<TAddress> | MaybeEscrowTokenAccount<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEscrowTokenAccountAccountDataDecoder()
  );
}

export async function fetchEscrowTokenAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<EscrowTokenAccount<TAddress>> {
  const maybeAccount = await fetchMaybeEscrowTokenAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrowTokenAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeEscrowTokenAccount<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEscrowTokenAccount(maybeAccount);
}

export async function fetchAllEscrowTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<EscrowTokenAccount[]> {
  const maybeAccounts = await fetchAllMaybeEscrowTokenAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEscrowTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeEscrowTokenAccount[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeEscrowTokenAccount(maybeAccount)
  );
}

export function getEscrowTokenAccountSize(): number {
  return 8;
}

export async function fetchEscrowTokenAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EscrowTokenAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<EscrowTokenAccount> {
  const maybeAccount = await fetchMaybeEscrowTokenAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrowTokenAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EscrowTokenAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeEscrowTokenAccount> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findEscrowTokenAccountPda(seeds, { programAddress });
  return await fetchMaybeEscrowTokenAccount(rpc, address, fetchConfig);
}
