/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  TammProgramProgramError,
  TammProgramProgramErrorCode,
  getTammProgramProgramErrorFromCode,
} from '../errors';
import { memcmp } from '../shared';

export const TAMM_PROGRAM_PROGRAM_ADDRESS =
  'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA' as Address<'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'>;

export type TammProgramProgram =
  Program<'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'> &
    ProgramWithErrors<TammProgramProgramErrorCode, TammProgramProgramError>;

export function getTammProgramProgram(): TammProgramProgram {
  return {
    name: 'tammProgram',
    address: TAMM_PROGRAM_PROGRAM_ADDRESS,
    getErrorFromCode(code: TammProgramProgramErrorCode, cause?: Error) {
      return getTammProgramProgramErrorFromCode(code, cause);
    },
  };
}

export enum TammProgramAccount {
  MyAccount,
  MyPdaAccount,
}

export function identifyTammProgramAccount(
  account: { data: Uint8Array } | Uint8Array
): TammProgramAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, new Uint8Array([246, 28, 6, 87, 251, 45, 50, 42]), 0)) {
    return TammProgramAccount.MyAccount;
  }
  if (memcmp(data, new Uint8Array([134, 161, 6, 144, 105, 236, 234, 48]), 0)) {
    return TammProgramAccount.MyPdaAccount;
  }
  throw new Error(
    'The provided account could not be identified as a tammProgram account.'
  );
}

export enum TammProgramInstruction {
  Create,
}

export function identifyTammProgramInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): TammProgramInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119]), 0)) {
    return TammProgramInstruction.Create;
  }
  throw new Error(
    'The provided instruction could not be identified as a tammProgram instruction.'
  );
}
