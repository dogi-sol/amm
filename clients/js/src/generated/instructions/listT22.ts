/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type ListT22Instruction<
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrowOwner extends string | IAccountMeta<string> = string,
  TAccountNftEscrowToken extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftSource extends string
        ? WritableAccount<TAccountNftSource>
        : TAccountNftSource,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrowOwner extends string
        ? WritableAccount<TAccountNftEscrowOwner>
        : TAccountNftEscrowOwner,
      TAccountNftEscrowToken extends string
        ? WritableAccount<TAccountNftEscrowToken>
        : TAccountNftEscrowToken,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts
    ]
  >;

export type ListT22InstructionWithSigners<
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrowOwner extends string | IAccountMeta<string> = string,
  TAccountNftEscrowToken extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftSource extends string
        ? WritableAccount<TAccountNftSource>
        : TAccountNftSource,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrowOwner extends string
        ? WritableAccount<TAccountNftEscrowOwner>
        : TAccountNftEscrowOwner,
      TAccountNftEscrowToken extends string
        ? WritableAccount<TAccountNftEscrowToken>
        : TAccountNftEscrowToken,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts
    ]
  >;

export type ListT22InstructionData = {
  discriminator: Array<number>;
  price: bigint;
};

export type ListT22InstructionDataArgs = { price: number | bigint };

export function getListT22InstructionDataEncoder(): Encoder<ListT22InstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['price', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [9, 117, 93, 230, 221, 4, 199, 212],
    })
  );
}

export function getListT22InstructionDataDecoder(): Decoder<ListT22InstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['price', getU64Decoder()],
  ]);
}

export function getListT22InstructionDataCodec(): Codec<
  ListT22InstructionDataArgs,
  ListT22InstructionData
> {
  return combineCodec(
    getListT22InstructionDataEncoder(),
    getListT22InstructionDataDecoder()
  );
}

export type ListT22Input<
  TAccountSingleListing extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string
> = {
  singleListing: Address<TAccountSingleListing>;
  nftSource: Address<TAccountNftSource>;
  nftMint: Address<TAccountNftMint>;
  nftEscrowOwner: Address<TAccountNftEscrowOwner>;
  nftEscrowToken: Address<TAccountNftEscrowToken>;
  owner: Address<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: Address<TAccountPayer>;
  price: ListT22InstructionDataArgs['price'];
};

export type ListT22InputWithSigners<
  TAccountSingleListing extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string
> = {
  singleListing: Address<TAccountSingleListing>;
  nftSource: Address<TAccountNftSource>;
  nftMint: Address<TAccountNftMint>;
  nftEscrowOwner: Address<TAccountNftEscrowOwner>;
  nftEscrowToken: Address<TAccountNftEscrowToken>;
  owner: TransactionSigner<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: TransactionSigner<TAccountPayer>;
  price: ListT22InstructionDataArgs['price'];
};

export function getListT22Instruction<
  TAccountSingleListing extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'
>(
  input: ListT22InputWithSigners<
    TAccountSingleListing,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer
  >
): ListT22InstructionWithSigners<
  TProgram,
  TAccountSingleListing,
  TAccountNftSource,
  TAccountNftMint,
  TAccountNftEscrowOwner,
  TAccountNftEscrowToken,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountPayer
>;
export function getListT22Instruction<
  TAccountSingleListing extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'
>(
  input: ListT22Input<
    TAccountSingleListing,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer
  >
): ListT22Instruction<
  TProgram,
  TAccountSingleListing,
  TAccountNftSource,
  TAccountNftMint,
  TAccountNftEscrowOwner,
  TAccountNftEscrowToken,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountPayer
>;
export function getListT22Instruction<
  TAccountSingleListing extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'
>(
  input: ListT22Input<
    TAccountSingleListing,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA' as Address<'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getListT22InstructionRaw<
      TProgram,
      TAccountSingleListing,
      TAccountNftSource,
      TAccountNftMint,
      TAccountNftEscrowOwner,
      TAccountNftEscrowToken,
      TAccountOwner,
      TAccountTokenProgram,
      TAccountSystemProgram,
      TAccountPayer
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    singleListing: { value: input.singleListing ?? null, isWritable: true },
    nftSource: { value: input.nftSource ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftEscrowOwner: { value: input.nftEscrowOwner ?? null, isWritable: true },
    nftEscrowToken: { value: input.nftEscrowToken ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getListT22InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as ListT22InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getListT22InstructionRaw<
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrowOwner extends string | IAccountMeta<string> = string,
  TAccountNftEscrowToken extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    singleListing: TAccountSingleListing extends string
      ? Address<TAccountSingleListing>
      : TAccountSingleListing;
    nftSource: TAccountNftSource extends string
      ? Address<TAccountNftSource>
      : TAccountNftSource;
    nftMint: TAccountNftMint extends string
      ? Address<TAccountNftMint>
      : TAccountNftMint;
    nftEscrowOwner: TAccountNftEscrowOwner extends string
      ? Address<TAccountNftEscrowOwner>
      : TAccountNftEscrowOwner;
    nftEscrowToken: TAccountNftEscrowToken extends string
      ? Address<TAccountNftEscrowToken>
      : TAccountNftEscrowToken;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    tokenProgram?: TAccountTokenProgram extends string
      ? Address<TAccountTokenProgram>
      : TAccountTokenProgram;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    payer: TAccountPayer extends string
      ? Address<TAccountPayer>
      : TAccountPayer;
  },
  args: ListT22InstructionDataArgs,
  programAddress: Address<TProgram> = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.singleListing, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftSource, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftMint, AccountRole.READONLY),
      accountMetaWithDefault(accounts.nftEscrowOwner, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftEscrowToken, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(
        accounts.tokenProgram ??
          ('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.payer, AccountRole.WRITABLE_SIGNER),
      ...(remainingAccounts ?? []),
    ],
    data: getListT22InstructionDataEncoder().encode(args),
    programAddress,
  } as ListT22Instruction<
    TProgram,
    TAccountSingleListing,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TRemainingAccounts
  >;
}

export type ParsedListT22Instruction<
  TProgram extends string = 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    singleListing: TAccountMetas[0];
    nftSource: TAccountMetas[1];
    nftMint: TAccountMetas[2];
    nftEscrowOwner: TAccountMetas[3];
    nftEscrowToken: TAccountMetas[4];
    owner: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    payer: TAccountMetas[8];
  };
  data: ListT22InstructionData;
};

export function parseListT22Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedListT22Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      singleListing: getNextAccount(),
      nftSource: getNextAccount(),
      nftMint: getNextAccount(),
      nftEscrowOwner: getNextAccount(),
      nftEscrowToken: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getListT22InstructionDataDecoder().decode(instruction.data),
  };
}
