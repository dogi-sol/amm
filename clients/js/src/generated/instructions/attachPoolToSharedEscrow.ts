/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type AttachPoolToSharedEscrowInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountSharedEscrow extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSharedEscrow extends string
        ? WritableAccount<TAccountSharedEscrow>
        : TAccountSharedEscrow,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AttachPoolToSharedEscrowInstructionData = {
  discriminator: Array<number>;
};

export type AttachPoolToSharedEscrowInstructionDataArgs = {};

export function getAttachPoolToSharedEscrowInstructionDataEncoder(): Encoder<AttachPoolToSharedEscrowInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [156, 47, 51, 203, 173, 150, 207, 0],
    })
  );
}

export function getAttachPoolToSharedEscrowInstructionDataDecoder(): Decoder<AttachPoolToSharedEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getAttachPoolToSharedEscrowInstructionDataCodec(): Codec<
  AttachPoolToSharedEscrowInstructionDataArgs,
  AttachPoolToSharedEscrowInstructionData
> {
  return combineCodec(
    getAttachPoolToSharedEscrowInstructionDataEncoder(),
    getAttachPoolToSharedEscrowInstructionDataDecoder()
  );
}

export type AttachPoolToSharedEscrowInput<
  TAccountSharedEscrow extends string = string,
  TAccountPool extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  sharedEscrow: Address<TAccountSharedEscrow>;
  pool: Address<TAccountPool>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getAttachPoolToSharedEscrowInstruction<
  TAccountSharedEscrow extends string,
  TAccountPool extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
>(
  input: AttachPoolToSharedEscrowInput<
    TAccountSharedEscrow,
    TAccountPool,
    TAccountOwner,
    TAccountSystemProgram
  >
): AttachPoolToSharedEscrowInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountSharedEscrow,
  TAccountPool,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sharedEscrow: { value: input.sharedEscrow ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sharedEscrow),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getAttachPoolToSharedEscrowInstructionDataEncoder().encode({}),
  } as AttachPoolToSharedEscrowInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountSharedEscrow,
    TAccountPool,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedAttachPoolToSharedEscrowInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    sharedEscrow: TAccountMetas[0];
    pool: TAccountMetas[1];
    owner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: AttachPoolToSharedEscrowInstructionData;
};

export function parseAttachPoolToSharedEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAttachPoolToSharedEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sharedEscrow: getNextAccount(),
      pool: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAttachPoolToSharedEscrowInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
