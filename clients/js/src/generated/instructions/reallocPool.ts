/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  PoolConfig,
  PoolConfigArgs,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type ReallocPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountCosigner extends string
        ? WritableSignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReallocPoolInstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
};

export type ReallocPoolInstructionDataArgs = { config: PoolConfigArgs };

export function getReallocPoolInstructionDataEncoder(): Encoder<ReallocPoolInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [114, 128, 37, 167, 71, 227, 40, 178],
    })
  );
}

export function getReallocPoolInstructionDataDecoder(): Decoder<ReallocPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
  ]);
}

export function getReallocPoolInstructionDataCodec(): Codec<
  ReallocPoolInstructionDataArgs,
  ReallocPoolInstructionData
> {
  return combineCodec(
    getReallocPoolInstructionDataEncoder(),
    getReallocPoolInstructionDataDecoder()
  );
}

export type ReallocPoolInput<
  TAccountPool extends string = string,
  TAccountOwner extends string = string,
  TAccountCosigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  owner: Address<TAccountOwner>;
  cosigner: TransactionSigner<TAccountCosigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: ReallocPoolInstructionDataArgs['config'];
};

export function getReallocPoolInstruction<
  TAccountPool extends string,
  TAccountOwner extends string,
  TAccountCosigner extends string,
  TAccountSystemProgram extends string,
>(
  input: ReallocPoolInput<
    TAccountPool,
    TAccountOwner,
    TAccountCosigner,
    TAccountSystemProgram
  >
): ReallocPoolInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountPool,
  TAccountOwner,
  TAccountCosigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    cosigner: { value: input.cosigner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReallocPoolInstructionDataEncoder().encode(
      args as ReallocPoolInstructionDataArgs
    ),
  } as ReallocPoolInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountPool,
    TAccountOwner,
    TAccountCosigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedReallocPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    owner: TAccountMetas[1];
    cosigner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ReallocPoolInstructionData;
};

export function parseReallocPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReallocPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      owner: getNextAccount(),
      cosigner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReallocPoolInstructionDataDecoder().decode(instruction.data),
  };
}
