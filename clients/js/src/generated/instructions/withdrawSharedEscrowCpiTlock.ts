/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type WithdrawSharedEscrowCpiTlockInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountSharedEscrow extends string | IAccountMeta<string> = string,
  TAccountOrderState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSharedEscrow extends string
        ? WritableAccount<TAccountSharedEscrow>
        : TAccountSharedEscrow,
      TAccountOrderState extends string
        ? ReadonlySignerAccount<TAccountOrderState> &
            IAccountSignerMeta<TAccountOrderState>
        : TAccountOrderState,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawSharedEscrowCpiTlockInstructionData = {
  discriminator: Array<number>;
  bump: number;
  orderId: Uint8Array;
  lamports: bigint;
};

export type WithdrawSharedEscrowCpiTlockInstructionDataArgs = {
  bump: number;
  orderId: Uint8Array;
  lamports: number | bigint;
};

export function getWithdrawSharedEscrowCpiTlockInstructionDataEncoder(): Encoder<WithdrawSharedEscrowCpiTlockInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['bump', getU8Encoder()],
      ['orderId', getBytesEncoder({ size: 32 })],
      ['lamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: [5, 242, 176, 14, 221, 3, 185, 71] })
  );
}

export function getWithdrawSharedEscrowCpiTlockInstructionDataDecoder(): Decoder<WithdrawSharedEscrowCpiTlockInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['bump', getU8Decoder()],
    ['orderId', getBytesDecoder({ size: 32 })],
    ['lamports', getU64Decoder()],
  ]);
}

export function getWithdrawSharedEscrowCpiTlockInstructionDataCodec(): Codec<
  WithdrawSharedEscrowCpiTlockInstructionDataArgs,
  WithdrawSharedEscrowCpiTlockInstructionData
> {
  return combineCodec(
    getWithdrawSharedEscrowCpiTlockInstructionDataEncoder(),
    getWithdrawSharedEscrowCpiTlockInstructionDataDecoder()
  );
}

export type WithdrawSharedEscrowCpiTlockInput<
  TAccountSharedEscrow extends string = string,
  TAccountOrderState extends string = string,
  TAccountOwner extends string = string,
  TAccountDestination extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  sharedEscrow: Address<TAccountSharedEscrow>;
  orderState: TransactionSigner<TAccountOrderState>;
  owner: Address<TAccountOwner>;
  destination: Address<TAccountDestination>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: WithdrawSharedEscrowCpiTlockInstructionDataArgs['bump'];
  orderId: WithdrawSharedEscrowCpiTlockInstructionDataArgs['orderId'];
  lamports: WithdrawSharedEscrowCpiTlockInstructionDataArgs['lamports'];
};

export function getWithdrawSharedEscrowCpiTlockInstruction<
  TAccountSharedEscrow extends string,
  TAccountOrderState extends string,
  TAccountOwner extends string,
  TAccountDestination extends string,
  TAccountSystemProgram extends string,
>(
  input: WithdrawSharedEscrowCpiTlockInput<
    TAccountSharedEscrow,
    TAccountOrderState,
    TAccountOwner,
    TAccountDestination,
    TAccountSystemProgram
  >
): WithdrawSharedEscrowCpiTlockInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountSharedEscrow,
  TAccountOrderState,
  TAccountOwner,
  TAccountDestination,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sharedEscrow: { value: input.sharedEscrow ?? null, isWritable: true },
    orderState: { value: input.orderState ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sharedEscrow),
      getAccountMeta(accounts.orderState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawSharedEscrowCpiTlockInstructionDataEncoder().encode(
      args as WithdrawSharedEscrowCpiTlockInstructionDataArgs
    ),
  } as WithdrawSharedEscrowCpiTlockInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountSharedEscrow,
    TAccountOrderState,
    TAccountOwner,
    TAccountDestination,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawSharedEscrowCpiTlockInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    sharedEscrow: TAccountMetas[0];
    orderState: TAccountMetas[1];
    owner: TAccountMetas[2];
    destination: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: WithdrawSharedEscrowCpiTlockInstructionData;
};

export function parseWithdrawSharedEscrowCpiTlockInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawSharedEscrowCpiTlockInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sharedEscrow: getNextAccount(),
      orderState: getNextAccount(),
      owner: getNextAccount(),
      destination: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawSharedEscrowCpiTlockInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
