/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  FeeSeeds,
  FeeSeedsArgs,
  getFeeSeedsDecoder,
  getFeeSeedsEncoder,
} from '../types';

export type FeeCrankInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FeeCrankInstructionData = {
  discriminator: Array<number>;
  feeSeeds: Array<FeeSeeds>;
};

export type FeeCrankInstructionDataArgs = { feeSeeds: Array<FeeSeedsArgs> };

export function getFeeCrankInstructionDataEncoder(): Encoder<FeeCrankInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['feeSeeds', getArrayEncoder(getFeeSeedsEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [108, 152, 200, 126, 233, 45, 155, 146],
    })
  );
}

export function getFeeCrankInstructionDataDecoder(): Decoder<FeeCrankInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['feeSeeds', getArrayDecoder(getFeeSeedsDecoder())],
  ]);
}

export function getFeeCrankInstructionDataCodec(): Codec<
  FeeCrankInstructionDataArgs,
  FeeCrankInstructionData
> {
  return combineCodec(
    getFeeCrankInstructionDataEncoder(),
    getFeeCrankInstructionDataDecoder()
  );
}

export type FeeCrankInput<
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Fee collection authority */
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  feeSeeds: FeeCrankInstructionDataArgs['feeSeeds'];
  feeAccounts: Array<Address>;
};

export function getFeeCrankInstruction<
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
>(
  input: FeeCrankInput<TAccountAuthority, TAccountSystemProgram>
): FeeCrankInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = args.feeAccounts.map((address) => ({
    address,
    role: AccountRole.WRITABLE,
  }));

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getFeeCrankInstructionDataEncoder().encode(
      args as FeeCrankInstructionDataArgs
    ),
  } as FeeCrankInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedFeeCrankInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Fee collection authority */
    authority: TAccountMetas[0];
    systemProgram: TAccountMetas[1];
  };
  data: FeeCrankInstructionData;
};

export function parseFeeCrankInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFeeCrankInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getFeeCrankInstructionDataDecoder().decode(instruction.data),
  };
}
