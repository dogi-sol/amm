/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  FeeSeeds,
  FeeSeedsArgs,
  getFeeSeedsDecoder,
  getFeeSeedsEncoder,
} from '../types';

export type FeeCrankInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type FeeCrankInstructionData = {
  discriminator: Array<number>;
  accountSeeds: Array<FeeSeeds>;
};

export type FeeCrankInstructionDataArgs = { accountSeeds: Array<FeeSeedsArgs> };

export function getFeeCrankInstructionDataEncoder(): Encoder<FeeCrankInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['accountSeeds', getArrayEncoder(getFeeSeedsEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [108, 152, 200, 126, 233, 45, 155, 146],
    })
  );
}

export function getFeeCrankInstructionDataDecoder(): Decoder<FeeCrankInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['accountSeeds', getArrayDecoder(getFeeSeedsDecoder())],
  ]);
}

export function getFeeCrankInstructionDataCodec(): Codec<
  FeeCrankInstructionDataArgs,
  FeeCrankInstructionData
> {
  return combineCodec(
    getFeeCrankInstructionDataEncoder(),
    getFeeCrankInstructionDataDecoder()
  );
}

export type FeeCrankInput<TAccountAuthority extends string = string> = {
  /** Fee collection authority */
  authority: TransactionSigner<TAccountAuthority>;
  accountSeeds: FeeCrankInstructionDataArgs['accountSeeds'];
};

export function getFeeCrankInstruction<TAccountAuthority extends string>(
  input: FeeCrankInput<TAccountAuthority>
): FeeCrankInstruction<typeof AMM_PROGRAM_ADDRESS, TAccountAuthority> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.authority)],
    programAddress,
    data: getFeeCrankInstructionDataEncoder().encode(
      args as FeeCrankInstructionDataArgs
    ),
  } as FeeCrankInstruction<typeof AMM_PROGRAM_ADDRESS, TAccountAuthority>;

  return instruction;
}

export type ParsedFeeCrankInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Fee collection authority */
    authority: TAccountMetas[0];
  };
  data: FeeCrankInstructionData;
};

export function parseFeeCrankInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFeeCrankInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
    },
    data: getFeeCrankInstructionDataDecoder().decode(instruction.data),
  };
}
