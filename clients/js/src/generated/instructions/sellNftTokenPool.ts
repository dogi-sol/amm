/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  AuthorizationDataLocal,
  AuthorizationDataLocalArgs,
  getAuthorizationDataLocalDecoder,
  getAuthorizationDataLocalEncoder,
} from '../types';

export type SellNftTokenPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountMintProof extends string | IAccountMeta<string> = string,
  TAccountNftSellerAcc extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountSolEscrow extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSeller extends string | IAccountMeta<string> = string,
  TAccountOwnerAtaAcc extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEdition extends string | IAccountMeta<string> = string,
  TAccountOwnerTokenRecord extends string | IAccountMeta<string> = string,
  TAccountDestTokenRecord extends string | IAccountMeta<string> = string,
  TAccountTokenMetadataProgram extends string | IAccountMeta<string> = string,
  TAccountInstructions extends string | IAccountMeta<string> = string,
  TAccountAuthorizationRulesProgram extends
    | string
    | IAccountMeta<string> = string,
  TAccountNftEscrowOwner extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountTempEscrowTokenRecord extends string | IAccountMeta<string> = string,
  TAccountAuthRules extends string | IAccountMeta<string> = string,
  TAccountSharedEscrow extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountWhitelist extends string
        ? ReadonlyAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountMintProof extends string
        ? ReadonlyAccount<TAccountMintProof>
        : TAccountMintProof,
      TAccountNftSellerAcc extends string
        ? WritableAccount<TAccountNftSellerAcc>
        : TAccountNftSellerAcc,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountSolEscrow extends string
        ? WritableAccount<TAccountSolEscrow>
        : TAccountSolEscrow,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSeller extends string
        ? WritableSignerAccount<TAccountSeller> &
            IAccountSignerMeta<TAccountSeller>
        : TAccountSeller,
      TAccountOwnerAtaAcc extends string
        ? WritableAccount<TAccountOwnerAtaAcc>
        : TAccountOwnerAtaAcc,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEdition extends string
        ? ReadonlyAccount<TAccountEdition>
        : TAccountEdition,
      TAccountOwnerTokenRecord extends string
        ? WritableAccount<TAccountOwnerTokenRecord>
        : TAccountOwnerTokenRecord,
      TAccountDestTokenRecord extends string
        ? WritableAccount<TAccountDestTokenRecord>
        : TAccountDestTokenRecord,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountInstructions extends string
        ? ReadonlyAccount<TAccountInstructions>
        : TAccountInstructions,
      TAccountAuthorizationRulesProgram extends string
        ? ReadonlyAccount<TAccountAuthorizationRulesProgram>
        : TAccountAuthorizationRulesProgram,
      TAccountNftEscrowOwner extends string
        ? WritableAccount<TAccountNftEscrowOwner>
        : TAccountNftEscrowOwner,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountTempEscrowTokenRecord extends string
        ? WritableAccount<TAccountTempEscrowTokenRecord>
        : TAccountTempEscrowTokenRecord,
      TAccountAuthRules extends string
        ? ReadonlyAccount<TAccountAuthRules>
        : TAccountAuthRules,
      TAccountSharedEscrow extends string
        ? WritableAccount<TAccountSharedEscrow>
        : TAccountSharedEscrow,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      ...TRemainingAccounts,
    ]
  >;

export type SellNftTokenPoolInstructionData = {
  discriminator: Array<number>;
  minPrice: bigint;
  rulesAccPresent: boolean;
  authorizationData: Option<AuthorizationDataLocal>;
  optionalRoyaltyPct: Option<number>;
};

export type SellNftTokenPoolInstructionDataArgs = {
  minPrice: number | bigint;
  rulesAccPresent: boolean;
  authorizationData: OptionOrNullable<AuthorizationDataLocalArgs>;
  optionalRoyaltyPct: OptionOrNullable<number>;
};

export function getSellNftTokenPoolInstructionDataEncoder(): Encoder<SellNftTokenPoolInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['minPrice', getU64Encoder()],
      ['rulesAccPresent', getBooleanEncoder()],
      [
        'authorizationData',
        getOptionEncoder(getAuthorizationDataLocalEncoder()),
      ],
      ['optionalRoyaltyPct', getOptionEncoder(getU16Encoder())],
    ]),
    (value) => ({ ...value, discriminator: [57, 44, 192, 48, 83, 8, 107, 48] })
  );
}

export function getSellNftTokenPoolInstructionDataDecoder(): Decoder<SellNftTokenPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['minPrice', getU64Decoder()],
    ['rulesAccPresent', getBooleanDecoder()],
    ['authorizationData', getOptionDecoder(getAuthorizationDataLocalDecoder())],
    ['optionalRoyaltyPct', getOptionDecoder(getU16Decoder())],
  ]);
}

export function getSellNftTokenPoolInstructionDataCodec(): Codec<
  SellNftTokenPoolInstructionDataArgs,
  SellNftTokenPoolInstructionData
> {
  return combineCodec(
    getSellNftTokenPoolInstructionDataEncoder(),
    getSellNftTokenPoolInstructionDataDecoder()
  );
}

export type SellNftTokenPoolInput<
  TAccountFeeVault extends string = string,
  TAccountPool extends string = string,
  TAccountWhitelist extends string = string,
  TAccountMintProof extends string = string,
  TAccountNftSellerAcc extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountSolEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountSeller extends string = string,
  TAccountOwnerAtaAcc extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEdition extends string = string,
  TAccountOwnerTokenRecord extends string = string,
  TAccountDestTokenRecord extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountInstructions extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountNftEscrowOwner extends string = string,
  TAccountNftEscrow extends string = string,
  TAccountTempEscrowTokenRecord extends string = string,
  TAccountAuthRules extends string = string,
  TAccountSharedEscrow extends string = string,
  TAccountTakerBroker extends string = string,
> = {
  feeVault: Address<TAccountFeeVault>;
  pool: Address<TAccountPool>;
  /** Needed for pool seeds derivation, also checked via has_one on pool */
  whitelist: Address<TAccountWhitelist>;
  /** intentionally not deserializing, it would be dummy in the case of VOC/FVC based verification */
  mintProof: Address<TAccountMintProof>;
  nftSellerAcc: Address<TAccountNftSellerAcc>;
  mint: Address<TAccountMint>;
  metadata: Address<TAccountMetadata>;
  solEscrow: Address<TAccountSolEscrow>;
  owner: Address<TAccountOwner>;
  seller: TransactionSigner<TAccountSeller>;
  ownerAtaAcc: Address<TAccountOwnerAtaAcc>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  edition: Address<TAccountEdition>;
  ownerTokenRecord?: Address<TAccountOwnerTokenRecord>;
  destTokenRecord?: Address<TAccountDestTokenRecord>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  instructions?: Address<TAccountInstructions>;
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  nftEscrowOwner: Address<TAccountNftEscrowOwner>;
  /** Implicitly checked via transfer. Will fail if wrong account */
  nftEscrow: Address<TAccountNftEscrow>;
  tempEscrowTokenRecord?: Address<TAccountTempEscrowTokenRecord>;
  authRules?: Address<TAccountAuthRules>;
  sharedEscrow: Address<TAccountSharedEscrow>;
  takerBroker: Address<TAccountTakerBroker>;
  minPrice: SellNftTokenPoolInstructionDataArgs['minPrice'];
  rulesAccPresent: SellNftTokenPoolInstructionDataArgs['rulesAccPresent'];
  authorizationData: SellNftTokenPoolInstructionDataArgs['authorizationData'];
  optionalRoyaltyPct: SellNftTokenPoolInstructionDataArgs['optionalRoyaltyPct'];
};

export function getSellNftTokenPoolInstruction<
  TAccountFeeVault extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountMintProof extends string,
  TAccountNftSellerAcc extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountSolEscrow extends string,
  TAccountOwner extends string,
  TAccountSeller extends string,
  TAccountOwnerAtaAcc extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEdition extends string,
  TAccountOwnerTokenRecord extends string,
  TAccountDestTokenRecord extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountInstructions extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrow extends string,
  TAccountTempEscrowTokenRecord extends string,
  TAccountAuthRules extends string,
  TAccountSharedEscrow extends string,
  TAccountTakerBroker extends string,
>(
  input: SellNftTokenPoolInput<
    TAccountFeeVault,
    TAccountPool,
    TAccountWhitelist,
    TAccountMintProof,
    TAccountNftSellerAcc,
    TAccountMint,
    TAccountMetadata,
    TAccountSolEscrow,
    TAccountOwner,
    TAccountSeller,
    TAccountOwnerAtaAcc,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEdition,
    TAccountOwnerTokenRecord,
    TAccountDestTokenRecord,
    TAccountTokenMetadataProgram,
    TAccountInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountNftEscrowOwner,
    TAccountNftEscrow,
    TAccountTempEscrowTokenRecord,
    TAccountAuthRules,
    TAccountSharedEscrow,
    TAccountTakerBroker
  >
): SellNftTokenPoolInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountFeeVault,
  TAccountPool,
  TAccountWhitelist,
  TAccountMintProof,
  TAccountNftSellerAcc,
  TAccountMint,
  TAccountMetadata,
  TAccountSolEscrow,
  TAccountOwner,
  TAccountSeller,
  TAccountOwnerAtaAcc,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountEdition,
  TAccountOwnerTokenRecord,
  TAccountDestTokenRecord,
  TAccountTokenMetadataProgram,
  TAccountInstructions,
  TAccountAuthorizationRulesProgram,
  TAccountNftEscrowOwner,
  TAccountNftEscrow,
  TAccountTempEscrowTokenRecord,
  TAccountAuthRules,
  TAccountSharedEscrow,
  TAccountTakerBroker
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    whitelist: { value: input.whitelist ?? null, isWritable: false },
    mintProof: { value: input.mintProof ?? null, isWritable: false },
    nftSellerAcc: { value: input.nftSellerAcc ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    solEscrow: { value: input.solEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: true },
    ownerAtaAcc: { value: input.ownerAtaAcc ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    edition: { value: input.edition ?? null, isWritable: false },
    ownerTokenRecord: {
      value: input.ownerTokenRecord ?? null,
      isWritable: true,
    },
    destTokenRecord: { value: input.destTokenRecord ?? null, isWritable: true },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    instructions: { value: input.instructions ?? null, isWritable: false },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    nftEscrowOwner: { value: input.nftEscrowOwner ?? null, isWritable: true },
    nftEscrow: { value: input.nftEscrow ?? null, isWritable: true },
    tempEscrowTokenRecord: {
      value: input.tempEscrowTokenRecord ?? null,
      isWritable: true,
    },
    authRules: { value: input.authRules ?? null, isWritable: false },
    sharedEscrow: { value: input.sharedEscrow ?? null, isWritable: true },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.mintProof),
      getAccountMeta(accounts.nftSellerAcc),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.solEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.ownerAtaAcc),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.ownerTokenRecord),
      getAccountMeta(accounts.destTokenRecord),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.instructions),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.nftEscrowOwner),
      getAccountMeta(accounts.nftEscrow),
      getAccountMeta(accounts.tempEscrowTokenRecord),
      getAccountMeta(accounts.authRules),
      getAccountMeta(accounts.sharedEscrow),
      getAccountMeta(accounts.takerBroker),
    ],
    programAddress,
    data: getSellNftTokenPoolInstructionDataEncoder().encode(
      args as SellNftTokenPoolInstructionDataArgs
    ),
  } as SellNftTokenPoolInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountFeeVault,
    TAccountPool,
    TAccountWhitelist,
    TAccountMintProof,
    TAccountNftSellerAcc,
    TAccountMint,
    TAccountMetadata,
    TAccountSolEscrow,
    TAccountOwner,
    TAccountSeller,
    TAccountOwnerAtaAcc,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEdition,
    TAccountOwnerTokenRecord,
    TAccountDestTokenRecord,
    TAccountTokenMetadataProgram,
    TAccountInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountNftEscrowOwner,
    TAccountNftEscrow,
    TAccountTempEscrowTokenRecord,
    TAccountAuthRules,
    TAccountSharedEscrow,
    TAccountTakerBroker
  >;

  return instruction;
}

export type ParsedSellNftTokenPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    feeVault: TAccountMetas[0];
    pool: TAccountMetas[1];
    /** Needed for pool seeds derivation, also checked via has_one on pool */
    whitelist: TAccountMetas[2];
    /** intentionally not deserializing, it would be dummy in the case of VOC/FVC based verification */
    mintProof: TAccountMetas[3];
    nftSellerAcc: TAccountMetas[4];
    mint: TAccountMetas[5];
    metadata: TAccountMetas[6];
    solEscrow: TAccountMetas[7];
    owner: TAccountMetas[8];
    seller: TAccountMetas[9];
    ownerAtaAcc: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    associatedTokenProgram: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    edition: TAccountMetas[14];
    ownerTokenRecord?: TAccountMetas[15] | undefined;
    destTokenRecord?: TAccountMetas[16] | undefined;
    tokenMetadataProgram?: TAccountMetas[17] | undefined;
    instructions?: TAccountMetas[18] | undefined;
    authorizationRulesProgram?: TAccountMetas[19] | undefined;
    nftEscrowOwner: TAccountMetas[20];
    /** Implicitly checked via transfer. Will fail if wrong account */
    nftEscrow: TAccountMetas[21];
    tempEscrowTokenRecord?: TAccountMetas[22] | undefined;
    authRules?: TAccountMetas[23] | undefined;
    sharedEscrow: TAccountMetas[24];
    takerBroker: TAccountMetas[25];
  };
  data: SellNftTokenPoolInstructionData;
};

export function parseSellNftTokenPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSellNftTokenPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 26) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === AMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      feeVault: getNextAccount(),
      pool: getNextAccount(),
      whitelist: getNextAccount(),
      mintProof: getNextAccount(),
      nftSellerAcc: getNextAccount(),
      mint: getNextAccount(),
      metadata: getNextAccount(),
      solEscrow: getNextAccount(),
      owner: getNextAccount(),
      seller: getNextAccount(),
      ownerAtaAcc: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      edition: getNextAccount(),
      ownerTokenRecord: getNextOptionalAccount(),
      destTokenRecord: getNextOptionalAccount(),
      tokenMetadataProgram: getNextOptionalAccount(),
      instructions: getNextOptionalAccount(),
      authorizationRulesProgram: getNextOptionalAccount(),
      nftEscrowOwner: getNextAccount(),
      nftEscrow: getNextAccount(),
      tempEscrowTokenRecord: getNextOptionalAccount(),
      authRules: getNextOptionalAccount(),
      sharedEscrow: getNextAccount(),
      takerBroker: getNextAccount(),
    },
    data: getSellNftTokenPoolInstructionDataDecoder().decode(instruction.data),
  };
}
