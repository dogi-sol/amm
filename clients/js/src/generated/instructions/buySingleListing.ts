/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  AuthorizationDataLocal,
  AuthorizationDataLocalArgs,
  getAuthorizationDataLocalDecoder,
  getAuthorizationDataLocalEncoder,
} from '../types';

export type BuySingleListingInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftBuyerAcc extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftMetadata extends string | IAccountMeta<string> = string,
  TAccountNftEscrowOwner extends string | IAccountMeta<string> = string,
  TAccountNftEscrowToken extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountBuyer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountNftEdition extends string | IAccountMeta<string> = string,
  TAccountOwnerTokenRecord extends string | IAccountMeta<string> = string,
  TAccountDestTokenRecord extends string | IAccountMeta<string> = string,
  TAccountPnftShared extends string | IAccountMeta<string> = string,
  TAccountAuthRules extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftBuyerAcc extends string
        ? WritableAccount<TAccountNftBuyerAcc>
        : TAccountNftBuyerAcc,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftMetadata extends string
        ? WritableAccount<TAccountNftMetadata>
        : TAccountNftMetadata,
      TAccountNftEscrowOwner extends string
        ? WritableAccount<TAccountNftEscrowOwner>
        : TAccountNftEscrowOwner,
      TAccountNftEscrowToken extends string
        ? WritableAccount<TAccountNftEscrowToken>
        : TAccountNftEscrowToken,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            IAccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountNftEdition extends string
        ? ReadonlyAccount<TAccountNftEdition>
        : TAccountNftEdition,
      TAccountOwnerTokenRecord extends string
        ? WritableAccount<TAccountOwnerTokenRecord>
        : TAccountOwnerTokenRecord,
      TAccountDestTokenRecord extends string
        ? WritableAccount<TAccountDestTokenRecord>
        : TAccountDestTokenRecord,
      TAccountPnftShared extends string
        ? ReadonlyAccount<TAccountPnftShared>
        : TAccountPnftShared,
      TAccountAuthRules extends string
        ? ReadonlyAccount<TAccountAuthRules>
        : TAccountAuthRules,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      ...TRemainingAccounts,
    ]
  >;

export type BuySingleListingInstructionData = {
  discriminator: Array<number>;
  maxPrice: bigint;
  rulesAccPresent: boolean;
  authorizationData: Option<AuthorizationDataLocal>;
  optionalRoyaltyPct: Option<number>;
};

export type BuySingleListingInstructionDataArgs = {
  maxPrice: number | bigint;
  rulesAccPresent: boolean;
  authorizationData: OptionOrNullable<AuthorizationDataLocalArgs>;
  optionalRoyaltyPct: OptionOrNullable<number>;
};

export function getBuySingleListingInstructionDataEncoder(): Encoder<BuySingleListingInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['maxPrice', getU64Encoder()],
      ['rulesAccPresent', getBooleanEncoder()],
      [
        'authorizationData',
        getOptionEncoder(getAuthorizationDataLocalEncoder()),
      ],
      ['optionalRoyaltyPct', getOptionEncoder(getU16Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [245, 220, 105, 73, 117, 98, 78, 141],
    })
  );
}

export function getBuySingleListingInstructionDataDecoder(): Decoder<BuySingleListingInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['maxPrice', getU64Decoder()],
    ['rulesAccPresent', getBooleanDecoder()],
    ['authorizationData', getOptionDecoder(getAuthorizationDataLocalDecoder())],
    ['optionalRoyaltyPct', getOptionDecoder(getU16Decoder())],
  ]);
}

export function getBuySingleListingInstructionDataCodec(): Codec<
  BuySingleListingInstructionDataArgs,
  BuySingleListingInstructionData
> {
  return combineCodec(
    getBuySingleListingInstructionDataEncoder(),
    getBuySingleListingInstructionDataDecoder()
  );
}

export type BuySingleListingInput<
  TAccountSingleListing extends string = string,
  TAccountNftBuyerAcc extends string = string,
  TAccountNftMint extends string = string,
  TAccountNftMetadata extends string = string,
  TAccountNftEscrowOwner extends string = string,
  TAccountNftEscrowToken extends string = string,
  TAccountOwner extends string = string,
  TAccountBuyer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountNftEdition extends string = string,
  TAccountOwnerTokenRecord extends string = string,
  TAccountDestTokenRecord extends string = string,
  TAccountPnftShared extends string = string,
  TAccountAuthRules extends string = string,
  TAccountTakerBroker extends string = string,
> = {
  singleListing: Address<TAccountSingleListing>;
  nftBuyerAcc: Address<TAccountNftBuyerAcc>;
  nftMint: Address<TAccountNftMint>;
  nftMetadata: Address<TAccountNftMetadata>;
  nftEscrowOwner: Address<TAccountNftEscrowOwner>;
  /**
   * Implicitly checked via transfer. Will fail if wrong account.
   * This is closed below (dest = owner)
   */
  nftEscrowToken: Address<TAccountNftEscrowToken>;
  owner: Address<TAccountOwner>;
  buyer: TransactionSigner<TAccountBuyer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  nftEdition: Address<TAccountNftEdition>;
  ownerTokenRecord: Address<TAccountOwnerTokenRecord>;
  destTokenRecord: Address<TAccountDestTokenRecord>;
  pnftShared: Address<TAccountPnftShared>;
  authRules: Address<TAccountAuthRules>;
  takerBroker: Address<TAccountTakerBroker>;
  maxPrice: BuySingleListingInstructionDataArgs['maxPrice'];
  rulesAccPresent: BuySingleListingInstructionDataArgs['rulesAccPresent'];
  authorizationData: BuySingleListingInstructionDataArgs['authorizationData'];
  optionalRoyaltyPct: BuySingleListingInstructionDataArgs['optionalRoyaltyPct'];
};

export function getBuySingleListingInstruction<
  TAccountSingleListing extends string,
  TAccountNftBuyerAcc extends string,
  TAccountNftMint extends string,
  TAccountNftMetadata extends string,
  TAccountNftEscrowOwner extends string,
  TAccountNftEscrowToken extends string,
  TAccountOwner extends string,
  TAccountBuyer extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountNftEdition extends string,
  TAccountOwnerTokenRecord extends string,
  TAccountDestTokenRecord extends string,
  TAccountPnftShared extends string,
  TAccountAuthRules extends string,
  TAccountTakerBroker extends string,
>(
  input: BuySingleListingInput<
    TAccountSingleListing,
    TAccountNftBuyerAcc,
    TAccountNftMint,
    TAccountNftMetadata,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountBuyer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountNftEdition,
    TAccountOwnerTokenRecord,
    TAccountDestTokenRecord,
    TAccountPnftShared,
    TAccountAuthRules,
    TAccountTakerBroker
  >
): BuySingleListingInstruction<
  typeof AMM_PROGRAM_ADDRESS,
  TAccountSingleListing,
  TAccountNftBuyerAcc,
  TAccountNftMint,
  TAccountNftMetadata,
  TAccountNftEscrowOwner,
  TAccountNftEscrowToken,
  TAccountOwner,
  TAccountBuyer,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountNftEdition,
  TAccountOwnerTokenRecord,
  TAccountDestTokenRecord,
  TAccountPnftShared,
  TAccountAuthRules,
  TAccountTakerBroker
> {
  // Program address.
  const programAddress = AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    singleListing: { value: input.singleListing ?? null, isWritable: true },
    nftBuyerAcc: { value: input.nftBuyerAcc ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftMetadata: { value: input.nftMetadata ?? null, isWritable: true },
    nftEscrowOwner: { value: input.nftEscrowOwner ?? null, isWritable: true },
    nftEscrowToken: { value: input.nftEscrowToken ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    nftEdition: { value: input.nftEdition ?? null, isWritable: false },
    ownerTokenRecord: {
      value: input.ownerTokenRecord ?? null,
      isWritable: true,
    },
    destTokenRecord: { value: input.destTokenRecord ?? null, isWritable: true },
    pnftShared: { value: input.pnftShared ?? null, isWritable: false },
    authRules: { value: input.authRules ?? null, isWritable: false },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.singleListing),
      getAccountMeta(accounts.nftBuyerAcc),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.nftMetadata),
      getAccountMeta(accounts.nftEscrowOwner),
      getAccountMeta(accounts.nftEscrowToken),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.nftEdition),
      getAccountMeta(accounts.ownerTokenRecord),
      getAccountMeta(accounts.destTokenRecord),
      getAccountMeta(accounts.pnftShared),
      getAccountMeta(accounts.authRules),
      getAccountMeta(accounts.takerBroker),
    ],
    programAddress,
    data: getBuySingleListingInstructionDataEncoder().encode(
      args as BuySingleListingInstructionDataArgs
    ),
  } as BuySingleListingInstruction<
    typeof AMM_PROGRAM_ADDRESS,
    TAccountSingleListing,
    TAccountNftBuyerAcc,
    TAccountNftMint,
    TAccountNftMetadata,
    TAccountNftEscrowOwner,
    TAccountNftEscrowToken,
    TAccountOwner,
    TAccountBuyer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountNftEdition,
    TAccountOwnerTokenRecord,
    TAccountDestTokenRecord,
    TAccountPnftShared,
    TAccountAuthRules,
    TAccountTakerBroker
  >;

  return instruction;
}

export type ParsedBuySingleListingInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    singleListing: TAccountMetas[0];
    nftBuyerAcc: TAccountMetas[1];
    nftMint: TAccountMetas[2];
    nftMetadata: TAccountMetas[3];
    nftEscrowOwner: TAccountMetas[4];
    /**
     * Implicitly checked via transfer. Will fail if wrong account.
     * This is closed below (dest = owner)
     */

    nftEscrowToken: TAccountMetas[5];
    owner: TAccountMetas[6];
    buyer: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    rent: TAccountMetas[11];
    nftEdition: TAccountMetas[12];
    ownerTokenRecord: TAccountMetas[13];
    destTokenRecord: TAccountMetas[14];
    pnftShared: TAccountMetas[15];
    authRules: TAccountMetas[16];
    takerBroker: TAccountMetas[17];
  };
  data: BuySingleListingInstructionData;
};

export function parseBuySingleListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBuySingleListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      singleListing: getNextAccount(),
      nftBuyerAcc: getNextAccount(),
      nftMint: getNextAccount(),
      nftMetadata: getNextAccount(),
      nftEscrowOwner: getNextAccount(),
      nftEscrowToken: getNextAccount(),
      owner: getNextAccount(),
      buyer: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      nftEdition: getNextAccount(),
      ownerTokenRecord: getNextAccount(),
      destTokenRecord: getNextAccount(),
      pnftShared: getNextAccount(),
      authRules: getNextAccount(),
      takerBroker: getNextAccount(),
    },
    data: getBuySingleListingInstructionDataDecoder().decode(instruction.data),
  };
}
